{"version":3,"file":"static/js/319.ccded2bb.chunk.js","mappings":"4SAEMA,EAAU,mCAChBC,EAAAA,GAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAmB,mCAAG,sGACVD,EAAAA,GAAAA,IAAA,sCAAyCD,IAD/B,uBACzBG,EADyB,EACzBA,KADyB,kBAE1BA,EAAKC,SAFqB,2CAAH,qDAKnBC,EAAc,mCAAG,WAAMC,GAAN,uFACLL,EAAAA,GAAAA,IAAA,iBACXK,EADW,oBACGN,EADH,oBADK,cACtBO,EADsB,yBAIrBA,EAASJ,MAJY,2CAAH,sDAOdK,EAAS,mCAAG,WAAMF,GAAN,uFACAL,EAAAA,GAAAA,IAAA,iBACXK,EADW,4BACWN,EADX,oBADA,cACjBO,EADiB,yBAIhBA,EAASJ,KAAKM,MAJE,2CAAH,sDAOTC,EAAY,mCAAG,WAAMJ,GAAN,uFACHL,EAAAA,GAAAA,IAAA,iBACXK,EADW,4BACWN,EADX,2BADG,cACpBO,EADoB,yBAInBA,EAASJ,KAAKC,SAJK,2CAAH,sDAOZO,EAAiB,mCAAG,WAAMC,GAAN,uFACRX,EAAAA,GAAAA,IAAA,gCACID,EADJ,iCACoCY,EADpC,gCADQ,cACzBL,EADyB,yBAIxBA,EAASJ,KAAKC,SAJU,2CAAH,qD,gGC5BjBS,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,wC,SCCVE,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,gBAAGd,EAAH,EAAGA,GAAIe,EAAP,EAAOA,MAAP,OACV,yBACE,SAACR,EAAD,CAAYS,GAAE,kBAAahB,GAAMiB,MAAOL,EAAxC,SACGG,KAFIf,EADC,KASjB,C,0GCdYkB,EAAY,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAK1B,OACE,SAAC,KAAD,CAAQC,cAAe,CAAEd,MAAO,IAAMe,SALnB,SAAC,EAAD,GAA+B,IAA5Bf,EAA2B,EAA3BA,MAAWgB,EAAgB,EAAhBA,UACjCH,EAAab,GACbgB,GACD,EAEC,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,KAAK,WACZ,mBAAQC,KAAK,SAAb,wBAIP,E,2BCVKC,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WAqCZ,EAlCe,WACb,OAA4BC,EAAAA,EAAAA,UAASD,GAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAekB,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACM1B,EAAQyB,EAAaE,IAAI,MAC/BC,EAAAA,EAAAA,YAAU,WACR,IAAK5B,EACH,OAAOsB,EAAUH,GAEnBG,EAAUH,IACVpB,EAAAA,EAAAA,IAAkBC,GAAO6B,MAAK,SAAAxB,GAC5BkB,EAAUlB,GACY,IAAlBA,EAAOyB,OAIXR,EAAUH,GAHRG,EAAUH,EAIb,GACF,GAAE,CAACnB,IAIJ,OACE,6BACE,SAACY,EAAD,CAAWC,aALM,SAAAb,GACnB0B,EAAgB1B,EAAQ,CAAE+B,EAAG/B,EAAMgC,OAAOC,eAAkB,CAAC,EAC9D,IAIIZ,IAAWF,IAAkB,sCAC7BE,IAAWF,IACV,4CAAoBnB,EAApB,iCAEDqB,IAAWF,IAAmB,SAACf,EAAA,EAAD,CAAYC,OAAQA,MAGxD,C","sources":["api/tmdb.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/MovieForm/MovieForm.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '21a38995d1a0d82c48e261b573f88f7b';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return data.results;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const fetchSearchMovies = async query => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledLink = styled(Link)`\n  color: blue;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { StyledLink } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <StyledLink to={`/movies/${id}`} state={location}>\n            {title}\n          </StyledLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import { Formik, Form, Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nexport const MovieForm = ({ onFormSubmit }) => {\n  const handleSubmit = ({ query }, { resetForm }) => {\n    onFormSubmit(query);\n    resetForm();\n  };\n  return (\n    <Formik initialValues={{ query: '' }} onSubmit={handleSubmit}>\n      <Form>\n        <Field name=\"query\" />\n        <button type=\"Submit\">Search</button>\n      </Form>\n    </Formik>\n  );\n};\n\nMovieForm.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n};\n","import { fetchSearchMovies } from 'api/tmdb';\nimport { MovieForm } from 'components/MovieForm/MovieForm';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst Movies = () => {\n  const [status, setStatus] = useState(Status.IDLE);\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('q');\n  useEffect(() => {\n    if (!query) {\n      return setStatus(Status.IDLE);\n    }\n    setStatus(Status.PENDING);\n    fetchSearchMovies(query).then(movies => {\n      setMovies(movies);\n      if (movies.length === 0) {\n        setStatus(Status.REJECTED);\n        return;\n      }\n      setStatus(Status.RESOLVED);\n    });\n  }, [query]);\n  const onFormSubmit = query => {\n    setSearchParams(query ? { q: query.trim().toLowerCase() } : {});\n  };\n  return (\n    <main>\n      <MovieForm onFormSubmit={onFormSubmit} />\n      {status === Status.PENDING && <p>loading...</p>}\n      {status === Status.REJECTED && (\n        <p>No movies with '{query}' substring has been found.</p>\n      )}\n      {status === Status.RESOLVED && <MoviesList movies={movies} />}\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","axios","fetchTrendingMovies","data","results","fetchMovieById","id","response","fetchCast","cast","fetchReviews","fetchSearchMovies","query","StyledLink","styled","Link","MoviesList","movies","location","useLocation","map","title","to","state","MovieForm","onFormSubmit","initialValues","onSubmit","resetForm","name","type","Status","useState","status","setStatus","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","then","length","q","trim","toLowerCase"],"sourceRoot":""}