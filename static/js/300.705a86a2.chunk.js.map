{"version":3,"file":"static/js/300.705a86a2.chunk.js","mappings":"4SAEMA,EAAU,mCAChBC,EAAAA,GAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAmB,mCAAG,sGACVD,EAAAA,GAAAA,IAAA,sCAAyCD,IAD/B,uBACzBG,EADyB,EACzBA,KADyB,kBAE1BA,EAAKC,SAFqB,2CAAH,qDAKnBC,EAAc,mCAAG,WAAMC,GAAN,uFACLL,EAAAA,GAAAA,IAAA,iBACXK,EADW,oBACGN,EADH,oBADK,cACtBO,EADsB,yBAIrBA,EAASJ,MAJY,2CAAH,sDAOdK,EAAS,mCAAG,WAAMF,GAAN,uFACAL,EAAAA,GAAAA,IAAA,iBACXK,EADW,4BACWN,EADX,oBADA,cACjBO,EADiB,yBAIhBA,EAASJ,KAAKM,MAJE,2CAAH,sDAOTC,EAAY,mCAAG,WAAMJ,GAAN,uFACHL,EAAAA,GAAAA,IAAA,iBACXK,EADW,4BACWN,EADX,2BADG,cACpBO,EADoB,yBAInBA,EAASJ,KAAKC,SAJK,2CAAH,sDAOZO,EAAiB,mCAAG,WAAMC,GAAN,uFACRX,EAAAA,GAAAA,IAAA,gCACID,EADJ,iCACoCY,EADpC,gCADQ,cACzBL,EADyB,yBAIxBA,EAASJ,KAAKC,SAJU,2CAAH,qD,iGC7BjBS,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC3B,OACE,4BACE,oCAAYA,EAAOC,WACnB,uBAAID,EAAOE,YAGhB,E,kBCJKC,EACK,UADLA,EAEM,WAFNA,EAGM,WAuCZ,EApCgB,WACd,OAA4BC,EAAAA,EAAAA,UAASD,GAArC,eAAOE,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAYR,OAXAE,EAAAA,EAAAA,YAAU,YACRf,EAAAA,EAAAA,IAAaa,GAASG,MAAK,SAAAL,GACzBC,EAAWD,GACY,IAAnBA,EAAQM,OAIZP,EAAUH,GAHRG,EAAUH,EAIb,GACF,GAAE,CAACM,IAEAJ,IAAWF,GACN,sCAGLE,IAAWF,GAEX,wBACGI,EAAQO,KAAI,SAAAd,GAAM,OACjB,yBACE,SAACD,EAAD,CAAYC,OAAQA,KADbA,EAAOR,GADC,MASrBa,IAAWF,GACN,gDADT,CAGD,C","sources":["api/tmdb.js","components/ReviewCard/ReviewCard.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '21a38995d1a0d82c48e261b573f88f7b';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return data.results;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const fetchSearchMovies = async query => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n","import PropTypes from 'prop-types';\n\nexport const ReviewCard = ({ review }) => {\n  return (\n    <div>\n      <b>Author: {review.author}</b>\n      <p>{review.content}</p>\n    </div>\n  );\n};\n\nReviewCard.propTypes = {\n  review: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { fetchReviews } from 'api/tmdb';\nimport { ReviewCard } from 'components/ReviewCard/ReviewCard';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Status = {\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst Reviews = () => {\n  const [status, setStatus] = useState(Status.PENDING);\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    fetchReviews(movieId).then(reviews => {\n      setReviews(reviews);\n      if (reviews.length === 0) {\n        setStatus(Status.REJECTED);\n        return;\n      }\n      setStatus(Status.RESOLVED);\n    });\n  }, [movieId]);\n\n  if (status === Status.PENDING) {\n    return <p>loading...</p>;\n  }\n\n  if (status === Status.RESOLVED) {\n    return (\n      <ul>\n        {reviews.map(review => (\n          <li key={review.id}>\n            <ReviewCard review={review} />\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  if (status === Status.REJECTED) {\n    return <p>No reviews yet.</p>;\n  }\n};\n\nexport default Reviews;\n"],"names":["API_KEY","axios","fetchTrendingMovies","data","results","fetchMovieById","id","response","fetchCast","cast","fetchReviews","fetchSearchMovies","query","ReviewCard","review","author","content","Status","useState","status","setStatus","reviews","setReviews","movieId","useParams","useEffect","then","length","map"],"sourceRoot":""}